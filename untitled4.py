# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KI6SnJfuf3YV3OmfxEXKpXpIYQYCH9te
"""

import numpy as np
from sklearn.mixture import GaussianMixture
from sklearn.metrics import adjusted_rand_score

# (a) Generate artificial 1-dimensional data
data1 = np.random.normal(loc=10, scale=3, size=100)
data2 = np.random.normal(loc=20, scale=2, size=100)
data = np.concatenate([data1, data2])

# (b) Fit a Gaussian mixture model
gmm = GaussianMixture(n_components=2, random_state=42)
gmm.fit(data.reshape(-1, 1))

# (c) Use the “predict” method to obtain predicted cluster labels
predicted_labels = gmm.predict(data.reshape(-1, 1))

# (d) Calculate the Rand score
true_labels = np.concatenate([np.zeros(100), np.ones(100)])  # Assuming 0 for the first 100 data points and 1 for the next 100
rand_score = adjusted_rand_score(true_labels, predicted_labels)
print("Adjusted Rand Score:", rand_score)

import pandas as pd
# Install apyori
!pip install apyori
from apyori import apriori

# (a) Read the CSV file into a pandas DataFrame
url = "http://fimi.uantwerpen.be/data/chess.dat"
df = pd.read_csv(url, header=None, sep=" ")

# (b) Transform the DataFrame into a form that the apyori system can use
transactions = df.apply(lambda row: row.dropna().astype(str).tolist(), axis=1).tolist()

# (c) Generate all association rules with length 2, support at least 0.01, confidence at least 2, and lift at least 3
rules = list(apriori(transactions, min_support=0.01, min_confidence=2, min_lift=3, min_length=2, max_length=2))
print(rules)
# (d) Print out the rules in a readable form
for rule in rules:
    antecedent = ', '.join(rule.items_base)
    consequent = ', '.join(rule.items_add)
    support = round(rule.support, 4)
    confidence = round(rule.ordered_statistics[0].confidence, 4)
    lift = round(rule.ordered_statistics[0].lift, 4)
    print(f"Rule: {antecedent} -> {consequent} | Support: {support}, Confidence: {confidence}, Lift: {lift}")